/* Erzeugt am 21.08.2005 von tbayen
 * $Id: ImportGNUCash.java,v 1.2 2005/09/08 06:27:44 tbayen Exp $
 */
package de.bayen.fibu.kontenimport;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;
import de.bayen.database.exception.SysDBEx.SQL_DBException;
import de.bayen.database.exception.UserDBEx.RecordNotExistsDBException;
import de.bayen.database.exception.UserDBEx.UserSQL_DBException;
import de.bayen.fibu.Buchhaltung;
import de.bayen.fibu.Konto;
import de.bayen.fibu.exceptions.FiBuException;
import de.bayen.fibu.exceptions.ImpossibleException;
import de.bayen.fibu.exceptions.FiBuException.NotInitializedException;
import de.bayen.fibu.exceptions.FiBuException.ParserException;

/**
 * Importiert Kontenrahmen aus dem GNUCash-Programm.
 */
public class ImportGNUCash {
	private static Log log = LogFactory.getLog(ImportGNUCash.class);
	private Document document;

	private ImportGNUCash(String filename, Buchhaltung buch)
			throws ParserException {
		try {
			DocumentBuilderFactory factory = DocumentBuilderFactory
					.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			InputSource source = new InputSource(new InputStreamReader(
					new FileInputStream(filename), "ISO-8859-1"));
			document = builder.parse(source);
		} catch (SAXParseException spe) {
			throw new FiBuException.ParserException("", spe, log);
			// Error generated by the parser
			//System.out.println("\n** Parsing error" + ", line "
			//		+ spe.getLineNumber() + ", uri " + spe.getSystemId());
			//System.out.println("   " + spe.getMessage());
			// Use the contained exception, if any
			//Exception x = spe;
			//if (spe.getException() != null)
			//	x = spe.getException();
			//x.printStackTrace();
		} catch (SAXException sxe) {
			throw new FiBuException.ParserException("", sxe, log);
			// Error generated during parsing
			//Exception x = sxe;
			//if (sxe.getException() != null)
			//	x = sxe.getException();
			//x.printStackTrace();
		} catch (ParserConfigurationException pce) {
			throw new FiBuException.ParserException("", pce, log);
			// Parser with specified options can't be built
			//pce.printStackTrace();
		} catch (IOException ioe) {
			throw new FiBuException.ParserException("", ioe, log);
			// I/O error
			//ioe.printStackTrace();
		}
	}

	/**
	 * Diese Methode extrahiert die Konten aus dem GNUCash-Kontenrahmen und
	 * wandelt sie für unsere FiBu um.
	 * @throws SQL_DBException 
	 * @throws UserSQL_DBException 
	 * @throws ParserException 
	 * @throws NotInitializedException 
	 *
	 */
	private void getAccounts(Buchhaltung buch) throws UserSQL_DBException,
			SQL_DBException, ParserException, NotInitializedException {
		// Hilfsklasse, in der das Ergebnis gespeichert wird:
		final class GNUAccount {
			String name;
			String code;
			String id;
			String type;
			String parent = null;
			boolean soll = false;

			// zum Debugging sehr nützlich:
			public String toString() {
				return "<" + name + "," + code + "," + id + "," + parent + ">";
			};
		}
		int counter = 1; // Hilfszähler für virtuelle Konten
		// Erstmal die Konten aus der XML-Quelle holen:
		NodeList acclist = document.getElementsByTagName("gnc:account");
		// Jetzt mein Ergebnisarray anlegen und die Rohdaten rüberkopieren
		GNUAccount[] accounts = new GNUAccount[acclist.getLength()];
		for (int i = 0; i < acclist.getLength(); i++) {
			Element account = (Element) acclist.item(i);
			GNUAccount acc = new GNUAccount();
			accounts[i] = acc;
			acc.name = account.getElementsByTagName("act:name").item(0)
					.getFirstChild().getNodeValue();
			acc.id = account.getElementsByTagName("act:id").item(0)
					.getFirstChild().getNodeValue();
			acc.type = account.getElementsByTagName("act:type").item(0)
					.getFirstChild().getNodeValue();
			Node parentElem = account.getElementsByTagName("act:parent")
					.item(0);
			if (parentElem != null)
				acc.parent = parentElem.getFirstChild().getNodeValue();
			Node codeElem = account.getElementsByTagName("act:code").item(0);
			if (codeElem != null) {
				acc.code = codeElem.getFirstChild().getNodeValue();
			} else {
				// Konten ohne Nummer sind "virtuelle Konten",
				// d.h. Übersichtskonten für Bilanz und GuV
				acc.code = "000" + Integer.toString(counter++);
				acc.code = "b" + (acc.code).substring(acc.code.length() - 3);
			}
			if (accounts[i].type.equals("ASSET")) {
				accounts[i].soll = true;
			} else if (accounts[i].type.equals("LIABILITY")) { // Verbindlichkeiten
				accounts[i].soll = false;
			} else if (accounts[i].type.equals("EQUITY")) {
				accounts[i].soll = true;
			} else if (accounts[i].type.equals("INCOME")) { // Gewinn
				accounts[i].soll = true;
			} else if (accounts[i].type.equals("EXPENSE")) { // Verlust
				accounts[i].soll = false;
			}
		}
		// Nun die Parents suchen und in mein Format wandeln
		for (int i = 0; i < accounts.length; i++) {
			String parent = accounts[i].parent;
			if (parent != null) {
				for (int j = 0; j < accounts.length; j++) {
					if (parent.equals(accounts[j].id)) {
						accounts[i].parent = accounts[j].code;
						break;
					}
				}
			} else {
				// kein Parent angegeben, also handelt es sich um ein virtuelles
				// Konto (ein in der Bilanz oder GuV genanntes Oberkonto), 
				// das GNUCash per Typ zuordnet.
				if (accounts[i].type.equals("ASSET")) {
					accounts[i].parent = "bilanz";
				} else if (accounts[i].type.equals("LIABILITY")) {
					accounts[i].parent = "bilanz";
				} else if (accounts[i].type.equals("EQUITY")) {
					accounts[i].parent = "bilanz";
				} else if (accounts[i].type.equals("INCOME")) {
					accounts[i].parent = "guv";
				} else if (accounts[i].type.equals("EXPENSE")) {
					accounts[i].parent = "guv";
				}
			}
		}
		// Die Buchhaltung leeren und die beiden Basiskonten BILANZ und GUV anlegen
		buch.firstTimeInit();
		Konto bilanz = buch.createKonto();
		bilanz.setBezeichnung("Bilanz");
		bilanz.setKontonummer("bilanz");
		bilanz.setGewicht(0);
		bilanz.setOberkonto((Long) null);
		bilanz.setSoll(true);
		bilanz.write();
		buch.setBilanzkonto(bilanz);
		Konto guv = buch.createKonto();
		guv.setBezeichnung("Gewinn- und Verlustrechnung");
		guv.setKontonummer("guv");
		guv.setGewicht(20);
		guv.setOberkonto(bilanz);
		guv.setSoll(false);
		guv.write();
		buch.setGuVKonto(guv);
		// und nun den Kontenrahmen ausgeben
		for (int i = 0; i < accounts.length; i++) {
			GNUAccount acc = accounts[i];
			Konto kto = buch.createKonto();
			kto.setBezeichnung(acc.name);
			kto.setKontonummer(acc.code);
			kto.setGewicht(2);
			try {
				kto.setOberkonto(buch.getKonto(acc.parent));
			} catch (RecordNotExistsDBException e) {
				// Das passiert nur, wenn ein Oberkonto gar nicht definiert ist
				// oder in der Datei erst nach dem Unterkonto definiert wird.
				// (ich weiss nicht, ob GNUCash das überhaupt zulässt)
				throw new FiBuException.ParserException(
						"Kontenreihenfolge in GNUCash-Datei falsch", e, log);
			}
			kto.setSoll(acc.soll);
			kto.write();
			//			System.out.println(acc.code + " - " + acc.parent + ": " + acc.name
			//			+ " (" + accounts[i].id + ", " + acc.type + ")");
		}
	}

	public static void importSKR04(Buchhaltung buch)
			throws UserSQL_DBException, NotInitializedException {
		try {
			ImportGNUCash importer = new ImportGNUCash(
					"bin/de/bayen/fibu/kontenimport/acctchrt_skr04.gnucash-xea",
					buch);
			importer.getAccounts(buch);
		} catch (SQL_DBException e) {
			throw new ImpossibleException(e, log);
		} catch (ParserException e) {
			// Exceptions beim Parsen können eigentlich gar nicht auftreten, da
			// die geparste Datei ja immer die gleiche ist. Deshalb bearbeite ich
			// die Exceptions hier nicht im Detail.
			throw new ImpossibleException(e, log);
		}
	}
}
/*
 * $Log: ImportGNUCash.java,v $
 * Revision 1.2  2005/09/08 06:27:44  tbayen
 * Buchhaltung.getBilanzkonto() überarbeitet
 *
 * Revision 1.1  2005/08/30 21:05:53  tbayen
 * Kontenplanimport aus GNUCash
 * Ausgabe von Auswertungen, Kontenübersicht, Bilanz, GuV, etc. als Tabelle
 * Nutzung von Transaktionen
 *
 */