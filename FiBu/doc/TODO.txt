TODO

Fibu:
- Testapplikation mit Menü für bestimmte Grundauswertungen (Bilanz, GuV, Debitoren)
- typische Buchungen mit kurzem Befehl anlegen

- Brief an Peter

- Profiling/allgemeine Performanz

- Import von Kontenrahmen/Konten aus diDurst
- Beschreibung von Zielapplikationen (Pflichtenheft) anfertigen
- Kassenbuch
- Bankbuch
- Zinsrechnung
- Darlehensauszüge
- automatische Buchungen (Miete, fällige Raten, etc.)
- Bankauszüge per HBCI
- Bankeinzüge per HBCI


FreibierDB:


später:
- Kommandozeileninterface (zum Testen und für Batch-Betrieb)
  (Scripting-Framework: http://www.javaworld.com/jw-10-1999/jw-10-script-p4.html)



Changes:
07.09.05
- Einarbeitung in Jameica
- Buchhaltung.getBilanzkonto() (Angabe Bilanz/GuV-Konto in Stammdaten)
31.08.05
- in Auswertungen nur bestimmte Daten (absummiert, Periode, etc.)
30.8.05
- Datum der Änderung in der History
- Buchung wird als Transaktion ausgeführt
- Transaktionen in FreibierDB eingebaut
- Tests für Auswertungen in Ordnung bringen
- eigene Klasse für Ausgabe von Spaltendaten: Drucktabelle
- Unterkonten mit in den Saldo einberechnen
- Import von Kontenrahmen aus GnuCash
- Datenbank-Parameter aus Properties-Datei und aus Config im Home-Verzeichnis
- Ausgaben von Test-Klassen nicht per println, sondern per Logging
- Todo erledigen, das bei der Exceptions-Wandlung aufgefallen ist
- Peters Mail-Anfrage klären
- FiBuGUI an Exceptions anpassen
- Dokumentation der Exceptions im Paket
- FiBu an Exceptions anpassen
- Exceptions in Klassenhierarchie aufteilen
- automatische Installation von jar-Files
- Doku mit Internet-Ressourcen zum Thema verlinken
- Sortierung unterstützen (Interface Comparable)
- Konto erweitern, damit es mit Buchungen umgehen kann
- Buchungszeilen lesen
- Journal erweitern, damit es mit Buchungen umgehen kann
- Buchungen lesen
- Wie bekomme ich eine Liste aller Unterkonten zu einem Konto?
- Wie bekomme ist eine Liste aller offenen Journale?
- buchungszeilen speichern
- Buchungszeile Basis
- Klasse für Beträge (mit Soll/Haben)
- Buchung Basis
- Journal
- Aufnehmen der Tests in die build.xml
- clean im build-Skript
- Lizenz
- Javadoc prüfen und ggf. aufhübschen
- setter für Jahr und Periode
- build-Skript
- DB: Prüfen der Tests
- Erstellung der Properties-Dateien, die die Datenbank beschreiben
- Bezug auf FreibierDB-Test im Initialisierungstest, um falsche Daten zu bekommen
- Erste Test-Klasse zum Erstellen der Datenbank
- prüfen der Warnungen in den Datenbankklassen
